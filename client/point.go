// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "area": point Resource Client
//
// Command:
// $ goagen
// --design=github.com/hryktrd/goaTest/design
// --out=$(GOPATH)\src\github.com\hryktrd\goaTest
// --regen=true
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ListPointPath computes a request path to the list action of point.
func ListPointPath() string {

	return fmt.Sprintf("/points/")
}

// point list
func (c *Client) ListPoint(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListPointRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListPointRequest create the request corresponding to the list action endpoint of the point resource.
func (c *Client) NewListPointRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.BasicAuthSigner != nil {
		if err := c.BasicAuthSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ShowPointPath computes a request path to the show action of point.
func ShowPointPath(pointID int) string {
	param0 := strconv.Itoa(pointID)

	return fmt.Sprintf("/points/%s", param0)
}

// Get point by id
func (c *Client) ShowPoint(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowPointRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowPointRequest create the request corresponding to the show action endpoint of the point resource.
func (c *Client) NewShowPointRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.BasicAuthSigner != nil {
		if err := c.BasicAuthSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
